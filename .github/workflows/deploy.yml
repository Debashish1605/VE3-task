name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        region: ${{ secrets.AWS_REGION }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.ECR_REGISTRY }}/my-web-app:latest

    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get Task Definition ARN
      id: get-task-def-arn
      run: |
        TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition my-task-def --query 'taskDefinition.taskDefinitionArn' --output text --region ${{ secrets.AWS_REGION }})
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Update ECS Service
      run: |
        aws ecs update-service --cluster my-cluster --service my-service --task-definition ${{ env.TASK_DEF_ARN }} --region ${{ secrets.AWS_REGION }}

    - name: Rollback if tests fail
      if: failure()
      run: |
        REVISION=$(aws ecs describe-task-definition --task-definition my-task-def --query 'taskDefinition.revision' --output text --region ${{ secrets.AWS_REGION }})
        PREVIOUS_REVISION=$((REVISION - 1))
        aws ecs update-service --cluster my-cluster --service my-service --task-definition my-task-def:${PREVIOUS_REVISION} --region ${{ secrets.AWS_REGION }}
