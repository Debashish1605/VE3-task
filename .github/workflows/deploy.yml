name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 180294178670.dkr.ecr.ap-south-1.amazonaws.com

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=latest
          docker build -t my-web-app .
          docker tag my-web-app:latest 180294178670.dkr.ecr.ap-south-1.amazonaws.com/my-web-app:$IMAGE_TAG
          docker push 180294178670.dkr.ecr.ap-south-1.amazonaws.com/my-web-app:$IMAGE_TAG

      - name: Deploy to ECS
        run: |
          # Register a new ECS task definition
          NEW_TASK_DEFINITION=$(aws ecs register-task-definition \
            --family my-task-def \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu "256" \
            --memory "512" \
            --execution-role-arn arn:aws:iam::180294178670:role/ECSExecutionRole \
            --container-definitions "[{\"name\":\"my-web-app\",\"image\":\"180294178670.dkr.ecr.ap-south-1.amazonaws.com/my-web-app:$IMAGE_TAG\",\"essential\":true,\"memory\":512,\"cpu\":256}]" \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          
          # Update the ECS service to use the new task definition
          aws ecs update-service --cluster my-web-cluster --service my-service --task-definition $NEW_TASK_DEFINITION
