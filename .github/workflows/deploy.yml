name: Deploy to AWS ECS with Rollback

on:
  push:
    branches:
      - main  # Trigger deployment on push to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials and region
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/my-web-app:${{ github.sha }} .

      # Step 5: Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/my-web-app:${{ github.sha }}

      # Step 6: Deploy the image to ECS
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment --region ap-south-1

      # Step 7: Wait for ECS service to stabilize
      - name: Wait for ECS service stabilization
        run: |
          aws ecs wait services-stable --cluster ${{ secrets.ECS_CLUSTER }} \
          --services ${{ secrets.ECS_SERVICE }} --region ap-south-1

      # Step 8: Run Integration Tests
      - name: Run Integration Tests
        run: |
          # Add a health check endpoint or use the website URL to verify
          response=$(curl --write-out '%{http_code}' --silent --output /dev/null http://your-app-url)
          if [ "$response" != "200" ]; then
            echo "Integration tests failed!"
            exit 1
          else
            echo "Integration tests passed!"
          fi

      # Step 9: Rollback if tests fail
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rolling back to previous Docker image..."
          # Retrieve the previous task definition from ECS
          previous_task_definition=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }} --region ap-south-1 --query 'services[0].taskDefinition' --output text)

          # Update ECS service to use the previous task definition (rollback)
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition $previous_task_definition \
            --force-new-deployment --region ap-south-1
